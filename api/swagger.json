{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Book A Meal App",
    "description": "This is an app that allow connect customers with food vendors. A link to the app [https://bookameal-app.herokuapp.com](here)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "olayinka.raheem16@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "https://bookameal-app.herokuapp.com/api/vi/docs/",
  "basePath": "/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API Endpoints for users on the system"
    },
    {
      "name": "Caterers",
      "description": "API Endpoints for Caterers on the system"
    },
    {
      "name": "Meals",
      "description": "API Endpoints to access Meals on the system"
    },
    {
      "name": "Menus",
      "description": "API Endpoints to access menu options on the system"
    },
    {
      "name": "Orders",
      "description": "API Endpoints to place orders and access orders information on the system"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Register A New User On The System",
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "User's First Name"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "User's Last Name"
                  },
                  "username": {
                    "type": "string",
                    "description": "User's Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's Password"
                  },
                  "email": {
                    "type": "string",
                    "description": "User's Email Address"
                  },
                  "role": {
                    "type": "integer",
                    "default": 3,
                    "description": "Access Role For A Regular User."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user added successfully"
          },
          "403": {
            "description": "Record Already Exist"
          },
          "401": {
            "description": "Authorization error"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/auth/signup{caterer}": {
      "post": {
        "tags": [
          "Caterers"
        ],
        "description": "Register a New Caterer On The System",
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "Caterer's First Name"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "Caterer's Last Name"
                  },
                  "username": {
                    "type": "string",
                    "description": "Caterer's Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Caterer's Password"
                  },
                  "email": {
                    "type": "string",
                    "description": "Caterer's Email Address"
                  },
                  "restaurant_name": {
                    "type": "string",
                    "description": "Name of Catering service"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "Logo of Catering service"
                  },
                  "role": {
                    "type": "integer",
                    "default": 3,
                    "description": "Access Role For A Caterer."
                  },
                  "rating": {
                    "type": "integer",
                    "default": 0,
                    "description": "Caterer's Rating On The System."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "New Caterer is registered"
          },
          "403": {
            "description": "Record Already Exist"
          },
          "401": {
            "description": "Authorization Error"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Log In a Registered User",
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Registered User's Username."
                  },
                  "password": {
                    "type": "string",
                    "description": "Registered User's Password."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User Logged In"
          },
          "204": {
            "description": "User Login Validation Error"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }, 
    "/api/v1/meals/": {
      "get": {
        "summary": "Get all meals options available logged in caterer",
        "tags": [
          "meals"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Logged In Caterer's Meals"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "summary": "Add New Meal to a list of avaliable meal options the system",
        "tags": [
          "meals"
        ],
        "requestBody": {
          "description": null,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of new Meal"
                  },
                  "price": {
                    "type": "float",
                    "description": "Price of new Meal"
                  },
                  "caterer_id": {
                    "type": "integer",
                    "description": "Logged In Caterer ID"
                  },
                  "image": {
                    "type": "string",
                    "description": "Image of new Meal"
                  },
                  "size": {
                    "type": "string",
                    "description": "Size/quantity of new Meal"
                  },
                  "currency": {
                    "type": "string",
                    "description": "locol currency of caterer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New Meal Created"
          },
          "403": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Authorization Error"
          },
          "500": {
            "description": "Server Error/ Service down"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/meals/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of meal to fetch",
          "type": "integer"
        }
      ],
      "delete": {
        "summary": "Delete Meal with given ID",
        "tags": [
          "meals"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Meal Deleted"
          },
          "401": {
            "description": "Only Authenticated Caterers are Authorized"
          },
          "403": {
            "description": "Invalid Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "summary": "Modify Meal with given ID",
        "tags": [
          "meals"
        ],
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name of Meal"
                  },
                  "price": {
                    "type": "float",
                    "description": "New price of Meal"
                  },
                  "size": {
                    "type": "string",
                    "description": "Size/Quantity of Meal"
                  },
                  "currency": {
                    "type": "float",
                    "description": "Local Currency Of Caterer"
                  },
                  "image": {
                    "type": "string",
                    "description": "New image of Meal"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Meal Updated"
          },
          "400": {
            "description": "Validation Error"
          },
          "401": {
            "description": "Only Authenticated Caterers are Authorized"
          },
          "500": {
            "description": "Meal with given ID does nor exist"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/menu/": {
      "get": {
        "summary": "Get all menus from all caterers",
        "tags": [
          "Menus"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Menus Retrieved"
          },
          "403": {
            "description": "Bad Request. No Token Provided."
          },
          "401": {
            "description": "Only Authenticated Users are Authorized"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "summary": "Add New Meal to Menu in the system",
        "tags": [
          "Menus"
        ],
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meal_id": {
                    "type": "integer",
                    "description": "ID of Meal to be Added"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Meals Added to Menu"
          },
          "403": {
            "description": "Invalid request. Meal could not be added."
          },
          "401": {
            "description": "Authorization error"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/orders": {
      "get": {
        "summary": "Get all orders to Logged In Caterer",
        "tags": [
          "Orders"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Orders Retrieved"
          },
          "401": {
            "description": "Authorization error"
          },
          "403": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "summary": "Add Menu To Order By Logged In User On the system",
        "tags": [
          "Orders"
        ],
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meal_id": {
                    "type": "string",
                    "description": "ID of Meal to be Added"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Quantity of Meal to order"
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Loggen In User ID"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Meal Added to Order Items"
          },
          "401": {
            "description": "Authorization error"
          },
          "403": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/orders/{order_id}": {
      "parameters": [
        {
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "ID of order item to fetch",
          "type": "integer"
        }
      ],
      "put": {
        "summary": "Update Order Item with give ID",
        "tags": [
          "Orders"
        ],
        "requestBody": {
          "description": "Request Body Data Format",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meal_id": {
                    "type": "string",
                    "description": "ID of Meal to Update"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "New Quantity of Meal to order"
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Loggen In User ID"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order Item Updated"
          },
          "403": {
            "description": "Validation Error"
          },
          "401": {
            "description": "Only Authenticated Users are Authorized"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  }
}